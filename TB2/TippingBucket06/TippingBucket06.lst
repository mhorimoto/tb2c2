CCS PCM C Compiler, Version 4.137, 5773               13-1-17 16:21

               Filename: C:\Workspace\workspacepic\project16\TippingBucket06\TippingBucket06.lst

               ROM used: 3537 words (86%)
                         Largest free fragment is 440
               RAM used: 34 (9%) at main() level
                         73 (20%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  NOP
0001:  MOVLP  08
0002:  GOTO   000
*
0004:  CLRF   03
0005:  CLRF   0A
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  BTFSS  0B.4
0010:  GOTO   013
0011:  BTFSC  0B.1
0012:  GOTO   02E
0013:  BTFSS  0B.5
0014:  GOTO   017
0015:  BTFSC  0B.2
0016:  GOTO   030
0017:  CLRF   05
0018:  MOVLW  91
0019:  MOVWF  04
001A:  BTFSS  00.2
001B:  GOTO   01E
001C:  BTFSC  11.2
001D:  GOTO   032
001E:  CLRF   05
001F:  MOVLW  91
0020:  MOVWF  04
0021:  BTFSS  00.5
0022:  GOTO   025
0023:  BTFSC  11.5
0024:  GOTO   034
0025:  MOVF   20,W
0026:  MOVWF  77
0027:  MOVF   21,W
0028:  MOVWF  78
0029:  MOVF   22,W
002A:  MOVWF  79
002B:  MOVF   23,W
002C:  MOVWF  7A
002D:  RETFIE
002E:  MOVLP  00
002F:  GOTO   065
0030:  MOVLP  00
0031:  GOTO   036
0032:  MOVLP  00
0033:  GOTO   03C
0034:  MOVLP  00
0035:  GOTO   077
.................... /**************************************** 
.................... *	Tipping Bucket03 
.................... *	農研センターフィールド試験機ver.01 
.................... *	転倒ます方式(2013.10.10) 
.................... ***************************************/ 
.................... #include  <16f1827.h> 
.................... //////// Standard Header file for the PIC16F1827 device //////////////// 
.................... #device PIC16F1827 
.................... #list 
....................  
....................   
.................... #fuses HS,WDT_SW,NOPROTECT,PUT,BROWNOUT,NOLVP,MCLR,NOIESO,NOFCMEN,NODEBUG,BORV25,PLL_SW 
....................  
.................... #use delay(CLOCK = 10000000)			//Specification of a clock frequency 
*
00A5:  MOVLW  20
00A6:  MOVWF  05
00A7:  MOVLW  21
00A8:  MOVWF  04
00A9:  MOVF   00,W
00AA:  BTFSC  03.2
00AB:  GOTO   0BA
00AC:  MOVLW  03
00AD:  MOVWF  78
00AE:  CLRF   77
00AF:  DECFSZ 77,F
00B0:  GOTO   0AF
00B1:  DECFSZ 78,F
00B2:  GOTO   0AE
00B3:  MOVLW  3C
00B4:  MOVWF  77
00B5:  DECFSZ 77,F
00B6:  GOTO   0B5
00B7:  GOTO   0B8
00B8:  DECFSZ 00,F
00B9:  GOTO   0AC
00BA:  RETURN
.................... //#use fast_io(B) 
....................  
.................... ////// LCD library setup 
.................... #define 	mode			0x05				//B0,B2:Input 
.................... #define 	output_x		output_B			//PortB use 
.................... #define 	set_tris_x	set_tris_B 
.................... #define	stb			PIN_B1			//breadboard:PIN_A0 printed board:PIN_B1 
.................... #define	rs			PIN_B4			//breadboard:PIN_A1 printed board:PIN_B4 
.................... #define	DB7			PIN_B6 
.................... #define	DB6			PIN_B7 
.................... #define	DB5			PIN_B3 
.................... #define	DB4			PIN_A1			//breadboard:PIN_B1 printed board:PIN_A1 
.................... #define  Pulse		PIN_A2			//Pulse Output Pin 
.................... #include  "lcd_lib.c" 
.................... /********************************************** 
.................... *  液晶表示器制御ライブラリ 
.................... *  内蔵関数は以下 
.................... *    lcd_init()    ----- 初期化 
.................... *    lcd_cmd(cmd)  ----- コマンド出力 
.................... *    lcd_data(chr) ----- １文字表示出力 
.................... *    lcd_clear()   ----- 全消去 
.................... ************************************************/ 
.................... /********* データ出力サブ関数 **************/ 
.................... void lcd_out(int code, int flag) 
.................... { 
.................... 	//output_x((code & 0xF0) | (input_x() & 0x0F)); 
....................  
.................... 	if((code & 0x80) == 0){ 
00BB:  MOVF   4F,W
00BC:  ANDLW  80
00BD:  BTFSS  03.2
00BE:  GOTO   0C5
.................... 		output_bit(DB7, 0); 
00BF:  MOVLB  02
00C0:  BCF    0D.6
00C1:  MOVLB  01
00C2:  BCF    0D.6
.................... 	} 
.................... 	else{ 
00C3:  GOTO   0C9
00C4:  MOVLB  00
.................... 		output_bit(DB7, 1); 
00C5:  MOVLB  02
00C6:  BSF    0D.6
00C7:  MOVLB  01
00C8:  BCF    0D.6
.................... 	} 
....................  
.................... 	if((code & 0x40) == 0){ 
00C9:  MOVLB  00
00CA:  MOVF   4F,W
00CB:  ANDLW  40
00CC:  BTFSS  03.2
00CD:  GOTO   0D4
.................... 		output_bit(DB6, 0); 
00CE:  MOVLB  02
00CF:  BCF    0D.7
00D0:  MOVLB  01
00D1:  BCF    0D.7
.................... 	} 
.................... 	else{ 
00D2:  GOTO   0D8
00D3:  MOVLB  00
.................... 		output_bit(DB6, 1); 
00D4:  MOVLB  02
00D5:  BSF    0D.7
00D6:  MOVLB  01
00D7:  BCF    0D.7
.................... 	} 
....................  
.................... 	if((code & 0x20) == 0){ 
00D8:  MOVLB  00
00D9:  MOVF   4F,W
00DA:  ANDLW  20
00DB:  BTFSS  03.2
00DC:  GOTO   0E3
.................... 		output_bit(DB5, 0); 
00DD:  MOVLB  02
00DE:  BCF    0D.3
00DF:  MOVLB  01
00E0:  BCF    0D.3
.................... 	} 
.................... 	else{ 
00E1:  GOTO   0E7
00E2:  MOVLB  00
.................... 		output_bit(DB5, 1); 
00E3:  MOVLB  02
00E4:  BSF    0D.3
00E5:  MOVLB  01
00E6:  BCF    0D.3
.................... 	} 
....................  
.................... 	if((code & 0x10) == 0){ 
00E7:  MOVLB  00
00E8:  MOVF   4F,W
00E9:  ANDLW  10
00EA:  BTFSS  03.2
00EB:  GOTO   0F2
.................... 		output_bit(DB4, 0); 
00EC:  MOVLB  02
00ED:  BCF    0C.1
00EE:  MOVLB  01
00EF:  BCF    0C.1
.................... 	} 
.................... 	else{ 
00F0:  GOTO   0F6
00F1:  MOVLB  00
.................... 		output_bit(DB4, 1); 
00F2:  MOVLB  02
00F3:  BSF    0C.1
00F4:  MOVLB  01
00F5:  BCF    0C.1
.................... 	} 
....................  
.................... 	if (flag == 0){ 
00F6:  MOVLB  00
00F7:  MOVF   50,F
00F8:  BTFSS  03.2
00F9:  GOTO   100
.................... 		output_high(rs);		//表示データの場合 
00FA:  MOVLB  01
00FB:  BCF    0D.4
00FC:  MOVLB  02
00FD:  BSF    0D.4
.................... 	} 
.................... 	else{ 
00FE:  GOTO   104
00FF:  MOVLB  00
.................... 		output_low(rs);			//コマンドデータの場合 
0100:  MOVLB  01
0101:  BCF    0D.4
0102:  MOVLB  02
0103:  BCF    0D.4
.................... 	} 
.................... 	delay_cycles(1);			//NOP		 
0104:  NOP
.................... 	output_high(stb);			//strobe out 
0105:  MOVLB  01
0106:  BCF    0D.1
0107:  MOVLB  02
0108:  BSF    0D.1
.................... 	delay_cycles(2);			//NOP 
0109:  GOTO   10A
.................... 	output_low(stb);			//reset strobe 
010A:  MOVLB  01
010B:  BCF    0D.1
010C:  MOVLB  02
010D:  BCF    0D.1
....................  
.................... } 
010E:  MOVLB  00
010F:  RETURN
.................... /******** １文字表示関数 **********/ 
.................... void lcd_data(int asci) 
.................... { 
.................... 	lcd_out(asci, 0);			//上位４ビット出力 
*
015F:  MOVF   4D,W
0160:  MOVWF  4F
0161:  CLRF   50
0162:  CALL   0BB
.................... 	lcd_out(asci<<4, 0);		//下位４ビット出力 
0163:  SWAPF  4D,W
0164:  MOVWF  4E
0165:  MOVLW  F0
0166:  ANDWF  4E,F
0167:  MOVF   4E,W
0168:  MOVWF  4F
0169:  CLRF   50
016A:  CALL   0BB
.................... 	delay_us(50);				//50μsec待ち 
016B:  MOVLW  29
016C:  MOVWF  77
016D:  DECFSZ 77,F
016E:  GOTO   16D
016F:  NOP
.................... } 
0170:  RETURN
.................... /******** コマンド出力関数 ********/ 
.................... void lcd_cmd(int cmd) 
.................... { 
.................... 	lcd_out(cmd, 1);			//上位４ビット出力 
*
0110:  MOVF   40,W
0111:  MOVWF  4F
0112:  MOVLW  01
0113:  MOVWF  50
0114:  CALL   0BB
.................... 	lcd_out(cmd<<4, 1);			//下位４ビット出力 
0115:  SWAPF  40,W
0116:  MOVWF  41
0117:  MOVLW  F0
0118:  ANDWF  41,F
0119:  MOVF   41,W
011A:  MOVWF  4F
011B:  MOVLW  01
011C:  MOVWF  50
011D:  CALL   0BB
.................... 	delay_ms(2);				//2msec待ち 
011E:  MOVLW  02
011F:  MOVWF  41
0120:  CALL   0A5
.................... } 
0121:  RETURN
.................... /********** 全消去関数 *********/ 
.................... void lcd_clear() 
.................... { 
.................... 	lcd_cmd(0x01);				//初期化コマンド出力 
*
0158:  MOVLW  01
0159:  MOVWF  40
015A:  CALL   110
.................... 	delay_ms(15);				//15msec待ち 
015B:  MOVLW  0F
015C:  MOVWF  41
015D:  CALL   0A5
.................... } 
015E:  RETURN
.................... /******** 初期化関数 *********/ 
.................... void lcd_init() 
.................... { 
.................... 	set_tris_x(mode);			//モードセット 
*
0122:  MOVLW  05
0123:  TRIS   6
.................... // 
.................... //	set_tris_A(0xF0); 
.................... //	 
.................... 	delay_ms(15); 
0124:  MOVLW  0F
0125:  MOVWF  41
0126:  CALL   0A5
.................... 	lcd_out(0x30, 1);			//8bit mode set 
0127:  MOVLW  30
0128:  MOVWF  4F
0129:  MOVLW  01
012A:  MOVWF  50
012B:  CALL   0BB
.................... 	delay_ms(5); 
012C:  MOVLW  05
012D:  MOVWF  41
012E:  CALL   0A5
.................... 	lcd_out(0x30, 1);			//8bit mode set 
012F:  MOVLW  30
0130:  MOVWF  4F
0131:  MOVLW  01
0132:  MOVWF  50
0133:  CALL   0BB
.................... 	delay_ms(1); 
0134:  MOVLW  01
0135:  MOVWF  41
0136:  CALL   0A5
.................... 	lcd_out(0x30, 1);			//8bit mode set 
0137:  MOVLW  30
0138:  MOVWF  4F
0139:  MOVLW  01
013A:  MOVWF  50
013B:  CALL   0BB
.................... 	delay_ms(1); 
013C:  MOVLW  01
013D:  MOVWF  41
013E:  CALL   0A5
.................... 	lcd_out(0x20, 1);			//4bit mode set 
013F:  MOVLW  20
0140:  MOVWF  4F
0141:  MOVLW  01
0142:  MOVWF  50
0143:  CALL   0BB
.................... 	delay_ms(1); 
0144:  MOVLW  01
0145:  MOVWF  41
0146:  CALL   0A5
.................... 	lcd_cmd(0x2E);				//DL=0 4bit mode 
0147:  MOVLW  2E
0148:  MOVWF  40
0149:  CALL   110
.................... 	lcd_cmd(0x08);				//display off C=D=B=0 
014A:  MOVLW  08
014B:  MOVWF  40
014C:  CALL   110
.................... 	lcd_cmd(0x0D);				//display on C=D=1 B=0 
014D:  MOVLW  0D
014E:  MOVWF  40
014F:  CALL   110
.................... 	lcd_cmd(0x06);				//entry I/D=1 S=0 
0150:  MOVLW  06
0151:  MOVWF  40
0152:  CALL   110
.................... 	lcd_cmd(0x02);				//cursor home 
0153:  MOVLW  02
0154:  MOVWF  40
0155:  CALL   110
.................... } 
0156:  MOVLP  08
0157:  GOTO   031 (RETURN)
....................  
....................  
....................  
.................... ////// Define Address 
.................... #bit		T1Start = 0x018.0	// 0:Stop Timer1, 1:Start Timer1 
....................  
.................... ////// RS-232C use setup 
.................... #use rs232(BAUD =19200, XMIT=PIN_B5, RCV=PIN_B2) 
....................  
.................... ////// Flow Meter setup 
.................... #define	r_bucket		0.1805				// Capacity of Right Bucket 
.................... //ver1:0.19925 ver2:0.1944 
.................... #define	l_bucket		0.1756				// Capacity of Left Bucket 
.................... //ver1:0.1906 ver2:0.179 
.................... const	float 		bucket_flow =  0.17805;// Average Capacity of Bucket (r_bucket+l_bucket)/2 
.................... //ver1:0.194925 ver2: 0.1867 
.................... static	long		g_tcnt;				// Timer0 overflow counter 
*
0825:  MOVLB  00
0826:  CLRF   24
0827:  CLRF   25
.................... static	int			g_tx_flag;			// Data Request-to-Send Flag 
0828:  CLRF   26
.................... static	long		g_tcnt_ms =0;			// Time measurement of a RSW pulse interval[msec.] 
.................... static	int			g_tcnt_min =0;			// Time measurement of a RSW pulse interval[min.] 
.................... static	long		g_tcnt_result =0;		// The latest RSW pulse cycle[msec.] 
.................... static	int			g_tcnt_result_min =0;		// The latest RSW pulse cycle[min.] 
.................... static 	float		g_drainage_flow = 0.0;	// The amount of discharge of a liquid  
.................... static 	float		g_before_offset = 0.0; // Liquid that has not been pulsed output 
....................  
.................... static	int			g_cal_flag;			// Flow calculation flag  
0829:  CLRF   35
....................  
....................  
.................... ///Timer0 interruption processing 
.................... #INT_TIMER0 
.................... void tip_cnt(){ 
.................... 	g_tcnt++; 
*
0036:  INCF   24,F
0037:  BTFSC  03.2
0038:  INCF   25,F
.................... 	//printf("OK\n"); ////debug 
.................... } 
....................  
.................... // CCP1 interruption processing　(1msec Cycle) 
0039:  BCF    0B.2
003A:  MOVLP  00
003B:  GOTO   025
.................... #INT_CCP1 
.................... void isr_ccp1(void){ 
.................... 	if(g_tcnt_ms < 60000){ 
003C:  MOVF   28,W
003D:  SUBLW  EA
003E:  BTFSS  03.0
003F:  GOTO   04A
0040:  BTFSS  03.2
0041:  GOTO   046
0042:  MOVF   27,W
0043:  SUBLW  5F
0044:  BTFSS  03.0
0045:  GOTO   04A
.................... 		g_tcnt_ms++; 
0046:  INCF   27,F
0047:  BTFSC  03.2
0048:  INCF   28,F
.................... 	} 
....................     else if(g_tcnt_min < 3 && g_tcnt_ms >= 60000){ 
0049:  GOTO   062
004A:  MOVF   29,W
004B:  SUBLW  02
004C:  BTFSS  03.0
004D:  GOTO   061
004E:  MOVF   28,W
004F:  SUBLW  E9
0050:  BTFSC  03.0
0051:  GOTO   061
0052:  XORLW  FF
0053:  BTFSS  03.2
0054:  GOTO   059
0055:  MOVF   27,W
0056:  SUBLW  5F
0057:  BTFSC  03.0
0058:  GOTO   061
....................         g_tcnt_min++; 
0059:  INCF   29,F
.................... 		g_tcnt_ms = 0; 
005A:  CLRF   28
005B:  CLRF   27
.................... 		 
.................... 		T1Start = 0; 
005C:  BCF    18.0
.................... 		set_timer1(0); 
005D:  CLRF   17
005E:  CLRF   16
.................... 		T1Start = 1;	// Start Timer1 
005F:  BSF    18.0
.................... 	} 
.................... 	else{ 
0060:  GOTO   062
.................... 		T1Start = 0;	// Stop Timer1 
0061:  BCF    18.0
.................... 	}	 
.................... } 
....................  
.................... ///EXT interruption processing (time measurement of a RSW pulse interval) 
0062:  BCF    11.2
0063:  MOVLP  00
0064:  GOTO   025
.................... #INT_EXT 
.................... void isr_ext(void){ 
.................... 	g_cal_flag = 1; 
0065:  MOVLW  01
0066:  MOVWF  35
.................... 	g_tcnt_result = g_tcnt_ms; 
0067:  MOVF   28,W
0068:  MOVWF  2B
0069:  MOVF   27,W
006A:  MOVWF  2A
.................... 	g_tcnt_result_min = g_tcnt_min; 
006B:  MOVF   29,W
006C:  MOVWF  2C
.................... 	g_tcnt_ms = 0; 
006D:  CLRF   28
006E:  CLRF   27
.................... 	g_tcnt_min = 0; 
006F:  CLRF   29
.................... 		 
.................... 	T1Start = 0; 
0070:  BCF    18.0
.................... 	set_timer1(0); 
0071:  CLRF   17
0072:  CLRF   16
.................... 	T1Start = 1;	// Start Timer1 
0073:  BSF    18.0
.................... }	 
....................  
....................  
.................... ///RS232c reception interruption processing 
0074:  BCF    0B.1
0075:  MOVLP  00
0076:  GOTO   025
.................... #INT_RDA 
.................... void isr_rcv(){ 
.................... 	char RcvData; 
.................... 	RcvData = getc(); 
0077:  BTFSS  11.5
0078:  GOTO   077
0079:  MOVLB  03
007A:  MOVF   19,W
007B:  MOVLB  00
007C:  MOVWF  5A
.................... 	 
.................... 	if(RcvData == 0x61){ 		//When transmitting "a"(Shift JIS)  
007D:  MOVF   5A,W
007E:  SUBLW  61
007F:  BTFSS  03.2
0080:  GOTO   084
.................... 		g_tx_flag = 1; 
0081:  MOVLW  01
0082:  MOVWF  26
.................... 	} 
.................... 	 
.................... 	else if(RcvData == 0x62){	//When transmitting "b"(Shift JIS)  
0083:  GOTO   095
0084:  MOVF   5A,W
0085:  SUBLW  62
0086:  BTFSS  03.2
0087:  GOTO   095
.................... 		g_tcnt = 0; 
0088:  CLRF   25
0089:  CLRF   24
.................... 		g_tcnt_ms = 0; 
008A:  CLRF   28
008B:  CLRF   27
.................... 		g_tcnt_min = 0; 
008C:  CLRF   29
.................... 		g_tcnt_result = 0; 
008D:  CLRF   2B
008E:  CLRF   2A
.................... 		g_tcnt_result_min = 0;  
008F:  CLRF   2C
.................... 		g_drainage_flow = 0.0; 
0090:  CLRF   30
0091:  CLRF   2F
0092:  CLRF   2E
0093:  CLRF   2D
.................... 		set_timer0(0); 
0094:  CLRF   15
.................... 	} 
.................... 	else{} 
.................... } 
....................  
....................  
....................  
0095:  BCF    11.5
0096:  MOVLP  00
0097:  GOTO   025
.................... void main() 
.................... { 
*
0800:  CLRF   05
0801:  CLRF   04
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  MOVLB  02
0805:  BSF    1E.0
0806:  BSF    1D.7
0807:  MOVLW  20
0808:  MOVLB  03
0809:  MOVWF  1B
080A:  MOVLW  A6
080B:  MOVWF  1E
080C:  MOVLW  90
080D:  MOVWF  1D
080E:  MOVLB  00
080F:  CLRF   28
0810:  CLRF   27
0811:  CLRF   29
0812:  CLRF   2B
0813:  CLRF   2A
0814:  CLRF   2C
0815:  CLRF   30
0816:  CLRF   2F
0817:  CLRF   2E
0818:  CLRF   2D
0819:  CLRF   34
081A:  CLRF   33
081B:  CLRF   32
081C:  CLRF   31
081D:  MOVLB  03
081E:  CLRF   0C
081F:  CLRF   0D
0820:  MOVLB  02
0821:  CLRF   12
0822:  CLRF   11
0823:  CLRF   14
0824:  CLRF   13
.................... 	////-- Initialization --//// 
.................... 	 
.................... 	/////Pulse Output Pin 
.................... 	output_bit(Pulse,1); 
*
082A:  MOVLB  02
082B:  BSF    0C.2
082C:  MOVLB  01
082D:  BCF    0C.2
.................... 	 
.................... 	//// LCD Initialization 
.................... 	lcd_init();	 
082E:  MOVLP  00
082F:  MOVLB  00
0830:  GOTO   122
0831:  MOVLP  08
.................... 	lcd_cmd(0x0C); 
0832:  MOVLW  0C
0833:  MOVWF  40
0834:  MOVLP  00
0835:  CALL   110
0836:  MOVLP  08
.................... 	lcd_clear(); 
0837:  MOVLP  00
0838:  CALL   158
0839:  MOVLP  08
.................... 	 
.................... 	//// Timer0 Initialization　External clock 1/1 
.................... 	setup_timer_0(RTCC_EXT_L_TO_H | RTCC_DIV_1); 
083A:  MOVLB  01
083B:  MOVF   15,W
083C:  ANDLW  C7
083D:  IORLW  28
083E:  MOVWF  15
.................... 	set_timer0(0); 
083F:  MOVLB  00
0840:  CLRF   15
.................... 	 
.................... 	/// Timer1 Initialization Internal clock prescaler 1/1	 
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0841:  MOVLW  05
0842:  MOVWF  18
0843:  CLRF   19
.................... 	T1Start = 0;		// Stop Timer1 
0844:  BCF    18.0
.................... 	set_timer1(0); 
0845:  CLRF   17
0846:  CLRF   16
.................... 	 
.................... 	/// CCP1Initialization　1msec 
.................... 	setup_ccp1(CCP_COMPARE_RESET_TIMER); 
0847:  MOVLB  02
0848:  BCF    1D.0
0849:  BCF    1D.1
084A:  BCF    1D.2
084B:  MOVLB  01
084C:  BCF    0D.3
084D:  MOVLB  02
084E:  BCF    0D.3
084F:  MOVLW  0B
0850:  MOVLB  05
0851:  MOVWF  13
0852:  CLRF   14
0853:  CLRF   15
0854:  BCF    1E.0
0855:  BCF    1E.1
0856:  MOVLW  01
0857:  MOVWF  16
.................... 	CCP_1 = 2500; 	//1kHz(=10MHz/(4*1*2500)) 
0858:  MOVLW  09
0859:  MOVWF  12
085A:  MOVLW  C4
085B:  MOVWF  11
.................... 	 
.................... 	//Edge of external interruption(RB0) 
.................... 	ext_int_edge(L_TO_H);	 
085C:  MOVLB  01
085D:  BSF    15.6
.................... 	 
.................... 	//WDT Initialization 
.................... 	setup_wdt(WDT_2S);	 
085E:  MOVLW  17
085F:  MOVWF  17
....................  
.................... 	enable_interrupts(INT_TIMER0); 
0860:  BSF    0B.5
.................... 	enable_interrupts(INT_CCP1); 
0861:  BSF    11.2
.................... 	enable_interrupts(INT_EXT); 
0862:  BSF    0B.4
.................... 	enable_interrupts(INT_RDA); 
0863:  BSF    11.5
.................... 	enable_interrupts(GLOBAL); 
0864:  MOVLW  C0
0865:  IORWF  0B,F
.................... 	 
.................... 	long	drainage_cnt;			//The number of times of Tipping Bucket 
.................... 	//float	flow_v;				//The present flow velocity 
.................... 	float 	bucket_offset;		//The offset value of bucket capacity 
.................... 	float 	Pulse_flow;			//Liquid pulse output before 
.................... 	g_tcnt = 0; 
0866:  MOVLB  00
0867:  CLRF   25
0868:  CLRF   24
.................... 	 
.................... 	//----------- Debug ------------ 
.................... 	//float	bucket_flow; 
.................... 	//bucket_flow = (r_bucket+l_bucket)/2; 
.................... 	//------------------------------ 
.................... 	 
.................... 	lcd_clear(); 
0869:  MOVLP  00
086A:  CALL   158
086B:  MOVLP  08
.................... 	printf(lcd_data,"restart"); 
086C:  MOVLW  98
086D:  MOVLB  03
086E:  MOVWF  11
086F:  MOVLW  00
0870:  MOVWF  12
0871:  MOVLP  00
0872:  MOVLB  00
0873:  GOTO   171
0874:  MOVLP  08
.................... 	delay_ms(1000); 
0875:  MOVLW  04
0876:  MOVWF  40
0877:  MOVLW  FA
0878:  MOVWF  41
0879:  MOVLP  00
087A:  CALL   0A5
087B:  MOVLP  08
087C:  DECFSZ 40,F
087D:  GOTO   077
.................... 	 
.................... 	T1Start = 1;	// Start Timer1 
087E:  BSF    18.0
.................... 	 
.................... 	while(1)							 
.................... 	{ 
.................... 		restart_wdt(); 
087F:  CLRWDT
.................... 		drainage_cnt =g_tcnt * 256 + (long)get_timer0(); 
0880:  MOVF   24,W
0881:  MOVWF  41
0882:  CLRF   40
0883:  MOVF   15,W
0884:  CLRF   7A
0885:  ADDWF  40,W
0886:  MOVWF  36
0887:  MOVF   7A,W
0888:  ADDWFC 41,W
0889:  MOVWF  37
.................... 		//printf("ms= %Ldms\n", g_tcnt_ms); ////debug 
....................  
.................... 		if(g_cal_flag == 1){ 
088A:  DECFSZ 35,W
088B:  GOTO   546
.................... 			if((g_tcnt_result_min == 0) && (g_tcnt_result < 2000) ){ 
088C:  MOVF   2C,F
088D:  BTFSS  03.2
088E:  GOTO   112
088F:  MOVF   2B,W
0890:  SUBLW  07
0891:  BTFSS  03.0
0892:  GOTO   112
0893:  BTFSS  03.2
0894:  GOTO   099
0895:  MOVF   2A,W
0896:  SUBLW  CF
0897:  BTFSS  03.0
0898:  GOTO   112
.................... 				bucket_offset =  0.09042; 
0899:  MOVLW  1F
089A:  MOVWF  3B
089B:  MOVLW  2E
089C:  MOVWF  3A
089D:  MOVLW  39
089E:  MOVWF  39
089F:  MOVLW  7B
08A0:  MOVWF  38
.................... 				//ver1:0.163 ver2: 0.1565 
.................... 				g_drainage_flow = g_drainage_flow + bucket_flow + bucket_offset; 
08A1:  BCF    03.1
08A2:  MOVF   30,W
08A3:  MOVWF  4B
08A4:  MOVF   2F,W
08A5:  MOVWF  4A
08A6:  MOVF   2E,W
08A7:  MOVWF  49
08A8:  MOVF   2D,W
08A9:  MOVWF  48
08AA:  MOVLW  BD
08AB:  MOVWF  4F
08AC:  MOVLW  52
08AD:  MOVWF  4E
08AE:  MOVLW  36
08AF:  MOVWF  4D
08B0:  MOVLW  7C
08B1:  MOVWF  4C
08B2:  MOVLP  00
08B3:  CALL   1B7
08B4:  MOVLP  08
08B5:  MOVF   77,W
08B6:  MOVWF  40
08B7:  MOVF   78,W
08B8:  MOVWF  41
08B9:  MOVF   79,W
08BA:  MOVWF  42
08BB:  MOVF   7A,W
08BC:  MOVWF  43
08BD:  BCF    03.1
08BE:  MOVF   43,W
08BF:  MOVWF  4B
08C0:  MOVF   42,W
08C1:  MOVWF  4A
08C2:  MOVF   41,W
08C3:  MOVWF  49
08C4:  MOVF   40,W
08C5:  MOVWF  48
08C6:  MOVF   3B,W
08C7:  MOVWF  4F
08C8:  MOVF   3A,W
08C9:  MOVWF  4E
08CA:  MOVF   39,W
08CB:  MOVWF  4D
08CC:  MOVF   38,W
08CD:  MOVWF  4C
08CE:  MOVLP  00
08CF:  CALL   1B7
08D0:  MOVLP  08
08D1:  MOVF   7A,W
08D2:  MOVWF  30
08D3:  MOVF   79,W
08D4:  MOVWF  2F
08D5:  MOVF   78,W
08D6:  MOVWF  2E
08D7:  MOVF   77,W
08D8:  MOVWF  2D
.................... 				Pulse_flow = g_before_offset + bucket_flow + bucket_offset; 
08D9:  BCF    03.1
08DA:  MOVF   34,W
08DB:  MOVWF  4B
08DC:  MOVF   33,W
08DD:  MOVWF  4A
08DE:  MOVF   32,W
08DF:  MOVWF  49
08E0:  MOVF   31,W
08E1:  MOVWF  48
08E2:  MOVLW  BD
08E3:  MOVWF  4F
08E4:  MOVLW  52
08E5:  MOVWF  4E
08E6:  MOVLW  36
08E7:  MOVWF  4D
08E8:  MOVLW  7C
08E9:  MOVWF  4C
08EA:  MOVLP  00
08EB:  CALL   1B7
08EC:  MOVLP  08
08ED:  MOVF   77,W
08EE:  MOVWF  40
08EF:  MOVF   78,W
08F0:  MOVWF  41
08F1:  MOVF   79,W
08F2:  MOVWF  42
08F3:  MOVF   7A,W
08F4:  MOVWF  43
08F5:  BCF    03.1
08F6:  MOVF   43,W
08F7:  MOVWF  4B
08F8:  MOVF   42,W
08F9:  MOVWF  4A
08FA:  MOVF   41,W
08FB:  MOVWF  49
08FC:  MOVF   40,W
08FD:  MOVWF  48
08FE:  MOVF   3B,W
08FF:  MOVWF  4F
0900:  MOVF   3A,W
0901:  MOVWF  4E
0902:  MOVF   39,W
0903:  MOVWF  4D
0904:  MOVF   38,W
0905:  MOVWF  4C
0906:  MOVLP  00
0907:  CALL   1B7
0908:  MOVLP  08
0909:  MOVF   7A,W
090A:  MOVWF  3F
090B:  MOVF   79,W
090C:  MOVWF  3E
090D:  MOVF   78,W
090E:  MOVWF  3D
090F:  MOVF   77,W
0910:  MOVWF  3C
.................... 				//printf("<2.0sec\n");////debug 
.................... 			} 
....................             else if((g_tcnt_result_min == 0)&&(g_tcnt_result < 2920)){ 
0911:  GOTO   417
0912:  MOVF   2C,F
0913:  BTFSS  03.2
0914:  GOTO   204
0915:  MOVF   2B,W
0916:  SUBLW  0B
0917:  BTFSS  03.0
0918:  GOTO   204
0919:  BTFSS  03.2
091A:  GOTO   11F
091B:  MOVF   2A,W
091C:  SUBLW  67
091D:  BTFSS  03.0
091E:  GOTO   204
.................... 				bucket_offset = (964.02 * bucket_flow-0.038986*(float)g_tcnt_result) / ((float)g_tcnt_result-964.02); 
091F:  MOVF   2B,W
0920:  MOVWF  45
0921:  MOVF   2A,W
0922:  MOVWF  44
0923:  MOVLP  00
0924:  CALL   2F9
0925:  MOVLP  08
0926:  MOVLW  C9
0927:  MOVWF  50
0928:  MOVLW  AF
0929:  MOVWF  4F
092A:  MOVLW  1F
092B:  MOVWF  4E
092C:  MOVLW  7A
092D:  MOVWF  4D
092E:  MOVF   7A,W
092F:  MOVWF  54
0930:  MOVF   79,W
0931:  MOVWF  53
0932:  MOVF   78,W
0933:  MOVWF  52
0934:  MOVF   77,W
0935:  MOVWF  51
0936:  MOVLP  00
0937:  CALL   316
0938:  MOVLP  08
0939:  BSF    03.1
093A:  MOVLW  CE
093B:  MOVWF  4B
093C:  MOVLW  A4
093D:  MOVWF  4A
093E:  MOVLW  2B
093F:  MOVWF  49
0940:  MOVLW  86
0941:  MOVWF  48
0942:  MOVF   7A,W
0943:  MOVWF  4F
0944:  MOVF   79,W
0945:  MOVWF  4E
0946:  MOVF   78,W
0947:  MOVWF  4D
0948:  MOVF   77,W
0949:  MOVWF  4C
094A:  MOVLP  00
094B:  CALL   1B7
094C:  MOVLP  08
094D:  MOVF   77,W
094E:  MOVWF  40
094F:  MOVF   78,W
0950:  MOVWF  41
0951:  MOVF   79,W
0952:  MOVWF  42
0953:  MOVF   7A,W
0954:  MOVWF  43
0955:  MOVF   2B,W
0956:  MOVWF  45
0957:  MOVF   2A,W
0958:  MOVWF  44
0959:  MOVLP  00
095A:  CALL   2F9
095B:  MOVLP  08
095C:  MOVF   77,W
095D:  MOVWF  44
095E:  MOVF   78,W
095F:  MOVWF  45
0960:  MOVF   79,W
0961:  MOVWF  46
0962:  MOVF   7A,W
0963:  MOVWF  47
0964:  BSF    03.1
0965:  MOVF   47,W
0966:  MOVWF  4B
0967:  MOVF   46,W
0968:  MOVWF  4A
0969:  MOVF   45,W
096A:  MOVWF  49
096B:  MOVF   44,W
096C:  MOVWF  48
096D:  MOVLW  48
096E:  MOVWF  4F
096F:  MOVLW  01
0970:  MOVWF  4E
0971:  MOVLW  71
0972:  MOVWF  4D
0973:  MOVLW  88
0974:  MOVWF  4C
0975:  MOVLP  00
0976:  CALL   1B7
0977:  MOVLP  08
0978:  MOVF   43,W
0979:  MOVWF  47
097A:  MOVF   42,W
097B:  MOVWF  46
097C:  MOVF   41,W
097D:  MOVWF  45
097E:  MOVF   40,W
097F:  MOVWF  44
0980:  MOVF   7A,W
0981:  MOVWF  4B
0982:  MOVF   79,W
0983:  MOVWF  4A
0984:  MOVF   78,W
0985:  MOVWF  49
0986:  MOVF   77,W
0987:  MOVWF  48
0988:  MOVLP  00
0989:  CALL   38B
098A:  MOVLP  08
098B:  MOVF   7A,W
098C:  MOVWF  3B
098D:  MOVF   79,W
098E:  MOVWF  3A
098F:  MOVF   78,W
0990:  MOVWF  39
0991:  MOVF   77,W
0992:  MOVWF  38
.................... 				g_drainage_flow = g_drainage_flow + bucket_flow + bucket_offset; 
0993:  BCF    03.1
0994:  MOVF   30,W
0995:  MOVWF  4B
0996:  MOVF   2F,W
0997:  MOVWF  4A
0998:  MOVF   2E,W
0999:  MOVWF  49
099A:  MOVF   2D,W
099B:  MOVWF  48
099C:  MOVLW  BD
099D:  MOVWF  4F
099E:  MOVLW  52
099F:  MOVWF  4E
09A0:  MOVLW  36
09A1:  MOVWF  4D
09A2:  MOVLW  7C
09A3:  MOVWF  4C
09A4:  MOVLP  00
09A5:  CALL   1B7
09A6:  MOVLP  08
09A7:  MOVF   77,W
09A8:  MOVWF  40
09A9:  MOVF   78,W
09AA:  MOVWF  41
09AB:  MOVF   79,W
09AC:  MOVWF  42
09AD:  MOVF   7A,W
09AE:  MOVWF  43
09AF:  BCF    03.1
09B0:  MOVF   43,W
09B1:  MOVWF  4B
09B2:  MOVF   42,W
09B3:  MOVWF  4A
09B4:  MOVF   41,W
09B5:  MOVWF  49
09B6:  MOVF   40,W
09B7:  MOVWF  48
09B8:  MOVF   3B,W
09B9:  MOVWF  4F
09BA:  MOVF   3A,W
09BB:  MOVWF  4E
09BC:  MOVF   39,W
09BD:  MOVWF  4D
09BE:  MOVF   38,W
09BF:  MOVWF  4C
09C0:  MOVLP  00
09C1:  CALL   1B7
09C2:  MOVLP  08
09C3:  MOVF   7A,W
09C4:  MOVWF  30
09C5:  MOVF   79,W
09C6:  MOVWF  2F
09C7:  MOVF   78,W
09C8:  MOVWF  2E
09C9:  MOVF   77,W
09CA:  MOVWF  2D
.................... 				Pulse_flow = g_before_offset + bucket_flow + bucket_offset; 
09CB:  BCF    03.1
09CC:  MOVF   34,W
09CD:  MOVWF  4B
09CE:  MOVF   33,W
09CF:  MOVWF  4A
09D0:  MOVF   32,W
09D1:  MOVWF  49
09D2:  MOVF   31,W
09D3:  MOVWF  48
09D4:  MOVLW  BD
09D5:  MOVWF  4F
09D6:  MOVLW  52
09D7:  MOVWF  4E
09D8:  MOVLW  36
09D9:  MOVWF  4D
09DA:  MOVLW  7C
09DB:  MOVWF  4C
09DC:  MOVLP  00
09DD:  CALL   1B7
09DE:  MOVLP  08
09DF:  MOVF   77,W
09E0:  MOVWF  40
09E1:  MOVF   78,W
09E2:  MOVWF  41
09E3:  MOVF   79,W
09E4:  MOVWF  42
09E5:  MOVF   7A,W
09E6:  MOVWF  43
09E7:  BCF    03.1
09E8:  MOVF   43,W
09E9:  MOVWF  4B
09EA:  MOVF   42,W
09EB:  MOVWF  4A
09EC:  MOVF   41,W
09ED:  MOVWF  49
09EE:  MOVF   40,W
09EF:  MOVWF  48
09F0:  MOVF   3B,W
09F1:  MOVWF  4F
09F2:  MOVF   3A,W
09F3:  MOVWF  4E
09F4:  MOVF   39,W
09F5:  MOVWF  4D
09F6:  MOVF   38,W
09F7:  MOVWF  4C
09F8:  MOVLP  00
09F9:  CALL   1B7
09FA:  MOVLP  08
09FB:  MOVF   7A,W
09FC:  MOVWF  3F
09FD:  MOVF   79,W
09FE:  MOVWF  3E
09FF:  MOVF   78,W
0A00:  MOVWF  3D
0A01:  MOVF   77,W
0A02:  MOVWF  3C
.................... 				//printf("<2.92sec\n"); ////debug 
.................... 			} 
....................  
....................             else if((g_tcnt_result_min >= 1)&&(g_tcnt_result_min < 2)){ 
0A03:  GOTO   417
0A04:  MOVF   2C,W
0A05:  SUBLW  00
0A06:  BTFSC  03.0
0A07:  GOTO   2F6
0A08:  MOVF   2C,W
0A09:  SUBLW  01
0A0A:  BTFSS  03.0
0A0B:  GOTO   2F6
.................... 				bucket_offset = (755.22 * bucket_flow) / (((float)g_tcnt_result+((float)g_tcnt_result_min*60000))-755.22); 
0A0C:  MOVF   2B,W
0A0D:  MOVWF  45
0A0E:  MOVF   2A,W
0A0F:  MOVWF  44
0A10:  MOVLP  00
0A11:  CALL   2F9
0A12:  MOVLP  08
0A13:  MOVF   77,W
0A14:  MOVWF  40
0A15:  MOVF   78,W
0A16:  MOVWF  41
0A17:  MOVF   79,W
0A18:  MOVWF  42
0A19:  MOVF   7A,W
0A1A:  MOVWF  43
0A1B:  CLRF   45
0A1C:  MOVF   2C,W
0A1D:  MOVWF  44
0A1E:  MOVLP  00
0A1F:  CALL   2F9
0A20:  MOVLP  08
0A21:  MOVF   77,W
0A22:  MOVWF  44
0A23:  MOVF   78,W
0A24:  MOVWF  45
0A25:  MOVF   79,W
0A26:  MOVWF  46
0A27:  MOVF   7A,W
0A28:  MOVWF  47
0A29:  MOVWF  50
0A2A:  MOVF   46,W
0A2B:  MOVWF  4F
0A2C:  MOVF   45,W
0A2D:  MOVWF  4E
0A2E:  MOVF   44,W
0A2F:  MOVWF  4D
0A30:  CLRF   54
0A31:  MOVLW  60
0A32:  MOVWF  53
0A33:  MOVLW  6A
0A34:  MOVWF  52
0A35:  MOVLW  8E
0A36:  MOVWF  51
0A37:  MOVLP  00
0A38:  CALL   316
0A39:  MOVLP  08
0A3A:  BCF    03.1
0A3B:  MOVF   43,W
0A3C:  MOVWF  4B
0A3D:  MOVF   42,W
0A3E:  MOVWF  4A
0A3F:  MOVF   41,W
0A40:  MOVWF  49
0A41:  MOVF   40,W
0A42:  MOVWF  48
0A43:  MOVF   7A,W
0A44:  MOVWF  4F
0A45:  MOVF   79,W
0A46:  MOVWF  4E
0A47:  MOVF   78,W
0A48:  MOVWF  4D
0A49:  MOVF   77,W
0A4A:  MOVWF  4C
0A4B:  MOVLP  00
0A4C:  CALL   1B7
0A4D:  MOVLP  08
0A4E:  MOVF   77,W
0A4F:  MOVWF  40
0A50:  MOVF   78,W
0A51:  MOVWF  41
0A52:  MOVF   79,W
0A53:  MOVWF  42
0A54:  MOVF   7A,W
0A55:  MOVWF  43
0A56:  BSF    03.1
0A57:  MOVF   43,W
0A58:  MOVWF  4B
0A59:  MOVF   42,W
0A5A:  MOVWF  4A
0A5B:  MOVF   41,W
0A5C:  MOVWF  49
0A5D:  MOVF   40,W
0A5E:  MOVWF  48
0A5F:  MOVLW  14
0A60:  MOVWF  4F
0A61:  MOVLW  CE
0A62:  MOVWF  4E
0A63:  MOVLW  3C
0A64:  MOVWF  4D
0A65:  MOVLW  88
0A66:  MOVWF  4C
0A67:  MOVLP  00
0A68:  CALL   1B7
0A69:  MOVLP  08
0A6A:  MOVLW  88
0A6B:  MOVWF  47
0A6C:  MOVLW  77
0A6D:  MOVWF  46
0A6E:  MOVLW  06
0A6F:  MOVWF  45
0A70:  MOVLW  86
0A71:  MOVWF  44
0A72:  MOVF   7A,W
0A73:  MOVWF  4B
0A74:  MOVF   79,W
0A75:  MOVWF  4A
0A76:  MOVF   78,W
0A77:  MOVWF  49
0A78:  MOVF   77,W
0A79:  MOVWF  48
0A7A:  MOVLP  00
0A7B:  CALL   38B
0A7C:  MOVLP  08
0A7D:  MOVF   7A,W
0A7E:  MOVWF  3B
0A7F:  MOVF   79,W
0A80:  MOVWF  3A
0A81:  MOVF   78,W
0A82:  MOVWF  39
0A83:  MOVF   77,W
0A84:  MOVWF  38
.................... 				g_drainage_flow = g_drainage_flow + bucket_flow + bucket_offset; 
0A85:  BCF    03.1
0A86:  MOVF   30,W
0A87:  MOVWF  4B
0A88:  MOVF   2F,W
0A89:  MOVWF  4A
0A8A:  MOVF   2E,W
0A8B:  MOVWF  49
0A8C:  MOVF   2D,W
0A8D:  MOVWF  48
0A8E:  MOVLW  BD
0A8F:  MOVWF  4F
0A90:  MOVLW  52
0A91:  MOVWF  4E
0A92:  MOVLW  36
0A93:  MOVWF  4D
0A94:  MOVLW  7C
0A95:  MOVWF  4C
0A96:  MOVLP  00
0A97:  CALL   1B7
0A98:  MOVLP  08
0A99:  MOVF   77,W
0A9A:  MOVWF  40
0A9B:  MOVF   78,W
0A9C:  MOVWF  41
0A9D:  MOVF   79,W
0A9E:  MOVWF  42
0A9F:  MOVF   7A,W
0AA0:  MOVWF  43
0AA1:  BCF    03.1
0AA2:  MOVF   43,W
0AA3:  MOVWF  4B
0AA4:  MOVF   42,W
0AA5:  MOVWF  4A
0AA6:  MOVF   41,W
0AA7:  MOVWF  49
0AA8:  MOVF   40,W
0AA9:  MOVWF  48
0AAA:  MOVF   3B,W
0AAB:  MOVWF  4F
0AAC:  MOVF   3A,W
0AAD:  MOVWF  4E
0AAE:  MOVF   39,W
0AAF:  MOVWF  4D
0AB0:  MOVF   38,W
0AB1:  MOVWF  4C
0AB2:  MOVLP  00
0AB3:  CALL   1B7
0AB4:  MOVLP  08
0AB5:  MOVF   7A,W
0AB6:  MOVWF  30
0AB7:  MOVF   79,W
0AB8:  MOVWF  2F
0AB9:  MOVF   78,W
0ABA:  MOVWF  2E
0ABB:  MOVF   77,W
0ABC:  MOVWF  2D
.................... 				Pulse_flow = g_before_offset + bucket_flow + bucket_offset; 
0ABD:  BCF    03.1
0ABE:  MOVF   34,W
0ABF:  MOVWF  4B
0AC0:  MOVF   33,W
0AC1:  MOVWF  4A
0AC2:  MOVF   32,W
0AC3:  MOVWF  49
0AC4:  MOVF   31,W
0AC5:  MOVWF  48
0AC6:  MOVLW  BD
0AC7:  MOVWF  4F
0AC8:  MOVLW  52
0AC9:  MOVWF  4E
0ACA:  MOVLW  36
0ACB:  MOVWF  4D
0ACC:  MOVLW  7C
0ACD:  MOVWF  4C
0ACE:  MOVLP  00
0ACF:  CALL   1B7
0AD0:  MOVLP  08
0AD1:  MOVF   77,W
0AD2:  MOVWF  40
0AD3:  MOVF   78,W
0AD4:  MOVWF  41
0AD5:  MOVF   79,W
0AD6:  MOVWF  42
0AD7:  MOVF   7A,W
0AD8:  MOVWF  43
0AD9:  BCF    03.1
0ADA:  MOVF   43,W
0ADB:  MOVWF  4B
0ADC:  MOVF   42,W
0ADD:  MOVWF  4A
0ADE:  MOVF   41,W
0ADF:  MOVWF  49
0AE0:  MOVF   40,W
0AE1:  MOVWF  48
0AE2:  MOVF   3B,W
0AE3:  MOVWF  4F
0AE4:  MOVF   3A,W
0AE5:  MOVWF  4E
0AE6:  MOVF   39,W
0AE7:  MOVWF  4D
0AE8:  MOVF   38,W
0AE9:  MOVWF  4C
0AEA:  MOVLP  00
0AEB:  CALL   1B7
0AEC:  MOVLP  08
0AED:  MOVF   7A,W
0AEE:  MOVWF  3F
0AEF:  MOVF   79,W
0AF0:  MOVWF  3E
0AF1:  MOVF   78,W
0AF2:  MOVWF  3D
0AF3:  MOVF   77,W
0AF4:  MOVWF  3C
.................... 				//printf("1.0min< <2min\n"); ////debug 
.................... 			} 
.................... 			else if(g_tcnt_result_min >= 2){ 
0AF5:  GOTO   417
0AF6:  MOVF   2C,W
0AF7:  SUBLW  01
0AF8:  BTFSC  03.0
0AF9:  GOTO   333
....................                 g_drainage_flow = g_drainage_flow + bucket_flow; 
0AFA:  BCF    03.1
0AFB:  MOVF   30,W
0AFC:  MOVWF  4B
0AFD:  MOVF   2F,W
0AFE:  MOVWF  4A
0AFF:  MOVF   2E,W
0B00:  MOVWF  49
0B01:  MOVF   2D,W
0B02:  MOVWF  48
0B03:  MOVLW  BD
0B04:  MOVWF  4F
0B05:  MOVLW  52
0B06:  MOVWF  4E
0B07:  MOVLW  36
0B08:  MOVWF  4D
0B09:  MOVLW  7C
0B0A:  MOVWF  4C
0B0B:  MOVLP  00
0B0C:  CALL   1B7
0B0D:  MOVLP  08
0B0E:  MOVF   7A,W
0B0F:  MOVWF  30
0B10:  MOVF   79,W
0B11:  MOVWF  2F
0B12:  MOVF   78,W
0B13:  MOVWF  2E
0B14:  MOVF   77,W
0B15:  MOVWF  2D
.................... 				Pulse_flow = g_before_offset + bucket_flow; 
0B16:  BCF    03.1
0B17:  MOVF   34,W
0B18:  MOVWF  4B
0B19:  MOVF   33,W
0B1A:  MOVWF  4A
0B1B:  MOVF   32,W
0B1C:  MOVWF  49
0B1D:  MOVF   31,W
0B1E:  MOVWF  48
0B1F:  MOVLW  BD
0B20:  MOVWF  4F
0B21:  MOVLW  52
0B22:  MOVWF  4E
0B23:  MOVLW  36
0B24:  MOVWF  4D
0B25:  MOVLW  7C
0B26:  MOVWF  4C
0B27:  MOVLP  00
0B28:  CALL   1B7
0B29:  MOVLP  08
0B2A:  MOVF   7A,W
0B2B:  MOVWF  3F
0B2C:  MOVF   79,W
0B2D:  MOVWF  3E
0B2E:  MOVF   78,W
0B2F:  MOVWF  3D
0B30:  MOVF   77,W
0B31:  MOVWF  3C
.................... 				//printf(">=2min.\n"); ////debug 
.................... 			} 
.................... 			else{ 
0B32:  GOTO   417
.................... 				bucket_offset = (376.41 * bucket_flow+0.00292*(float)g_tcnt_result) / ((float)g_tcnt_result-376.41); 
0B33:  MOVF   2B,W
0B34:  MOVWF  45
0B35:  MOVF   2A,W
0B36:  MOVWF  44
0B37:  MOVLP  00
0B38:  CALL   2F9
0B39:  MOVLP  08
0B3A:  MOVLW  79
0B3B:  MOVWF  50
0B3C:  MOVLW  5D
0B3D:  MOVWF  4F
0B3E:  MOVLW  3F
0B3F:  MOVWF  4E
0B40:  MOVLW  76
0B41:  MOVWF  4D
0B42:  MOVF   7A,W
0B43:  MOVWF  54
0B44:  MOVF   79,W
0B45:  MOVWF  53
0B46:  MOVF   78,W
0B47:  MOVWF  52
0B48:  MOVF   77,W
0B49:  MOVWF  51
0B4A:  MOVLP  00
0B4B:  CALL   316
0B4C:  MOVLP  08
0B4D:  BCF    03.1
0B4E:  MOVLW  23
0B4F:  MOVWF  4B
0B50:  MOVLW  0A
0B51:  MOVWF  4A
0B52:  MOVLW  06
0B53:  MOVWF  49
0B54:  MOVLW  85
0B55:  MOVWF  48
0B56:  MOVF   7A,W
0B57:  MOVWF  4F
0B58:  MOVF   79,W
0B59:  MOVWF  4E
0B5A:  MOVF   78,W
0B5B:  MOVWF  4D
0B5C:  MOVF   77,W
0B5D:  MOVWF  4C
0B5E:  MOVLP  00
0B5F:  CALL   1B7
0B60:  MOVLP  08
0B61:  MOVF   77,W
0B62:  MOVWF  40
0B63:  MOVF   78,W
0B64:  MOVWF  41
0B65:  MOVF   79,W
0B66:  MOVWF  42
0B67:  MOVF   7A,W
0B68:  MOVWF  43
0B69:  MOVF   2B,W
0B6A:  MOVWF  45
0B6B:  MOVF   2A,W
0B6C:  MOVWF  44
0B6D:  MOVLP  00
0B6E:  CALL   2F9
0B6F:  MOVLP  08
0B70:  MOVF   77,W
0B71:  MOVWF  44
0B72:  MOVF   78,W
0B73:  MOVWF  45
0B74:  MOVF   79,W
0B75:  MOVWF  46
0B76:  MOVF   7A,W
0B77:  MOVWF  47
0B78:  BSF    03.1
0B79:  MOVF   47,W
0B7A:  MOVWF  4B
0B7B:  MOVF   46,W
0B7C:  MOVWF  4A
0B7D:  MOVF   45,W
0B7E:  MOVWF  49
0B7F:  MOVF   44,W
0B80:  MOVWF  48
0B81:  MOVLW  7B
0B82:  MOVWF  4F
0B83:  MOVLW  34
0B84:  MOVWF  4E
0B85:  MOVLW  3C
0B86:  MOVWF  4D
0B87:  MOVLW  87
0B88:  MOVWF  4C
0B89:  MOVLP  00
0B8A:  CALL   1B7
0B8B:  MOVLP  08
0B8C:  MOVF   43,W
0B8D:  MOVWF  47
0B8E:  MOVF   42,W
0B8F:  MOVWF  46
0B90:  MOVF   41,W
0B91:  MOVWF  45
0B92:  MOVF   40,W
0B93:  MOVWF  44
0B94:  MOVF   7A,W
0B95:  MOVWF  4B
0B96:  MOVF   79,W
0B97:  MOVWF  4A
0B98:  MOVF   78,W
0B99:  MOVWF  49
0B9A:  MOVF   77,W
0B9B:  MOVWF  48
0B9C:  MOVLP  00
0B9D:  CALL   38B
0B9E:  MOVLP  08
0B9F:  MOVF   7A,W
0BA0:  MOVWF  3B
0BA1:  MOVF   79,W
0BA2:  MOVWF  3A
0BA3:  MOVF   78,W
0BA4:  MOVWF  39
0BA5:  MOVF   77,W
0BA6:  MOVWF  38
.................... 				g_drainage_flow = g_drainage_flow + bucket_flow + bucket_offset; 
0BA7:  BCF    03.1
0BA8:  MOVF   30,W
0BA9:  MOVWF  4B
0BAA:  MOVF   2F,W
0BAB:  MOVWF  4A
0BAC:  MOVF   2E,W
0BAD:  MOVWF  49
0BAE:  MOVF   2D,W
0BAF:  MOVWF  48
0BB0:  MOVLW  BD
0BB1:  MOVWF  4F
0BB2:  MOVLW  52
0BB3:  MOVWF  4E
0BB4:  MOVLW  36
0BB5:  MOVWF  4D
0BB6:  MOVLW  7C
0BB7:  MOVWF  4C
0BB8:  MOVLP  00
0BB9:  CALL   1B7
0BBA:  MOVLP  08
0BBB:  MOVF   77,W
0BBC:  MOVWF  40
0BBD:  MOVF   78,W
0BBE:  MOVWF  41
0BBF:  MOVF   79,W
0BC0:  MOVWF  42
0BC1:  MOVF   7A,W
0BC2:  MOVWF  43
0BC3:  BCF    03.1
0BC4:  MOVF   43,W
0BC5:  MOVWF  4B
0BC6:  MOVF   42,W
0BC7:  MOVWF  4A
0BC8:  MOVF   41,W
0BC9:  MOVWF  49
0BCA:  MOVF   40,W
0BCB:  MOVWF  48
0BCC:  MOVF   3B,W
0BCD:  MOVWF  4F
0BCE:  MOVF   3A,W
0BCF:  MOVWF  4E
0BD0:  MOVF   39,W
0BD1:  MOVWF  4D
0BD2:  MOVF   38,W
0BD3:  MOVWF  4C
0BD4:  MOVLP  00
0BD5:  CALL   1B7
0BD6:  MOVLP  08
0BD7:  MOVF   7A,W
0BD8:  MOVWF  30
0BD9:  MOVF   79,W
0BDA:  MOVWF  2F
0BDB:  MOVF   78,W
0BDC:  MOVWF  2E
0BDD:  MOVF   77,W
0BDE:  MOVWF  2D
.................... 				Pulse_flow = g_before_offset + bucket_flow + bucket_offset; 
0BDF:  BCF    03.1
0BE0:  MOVF   34,W
0BE1:  MOVWF  4B
0BE2:  MOVF   33,W
0BE3:  MOVWF  4A
0BE4:  MOVF   32,W
0BE5:  MOVWF  49
0BE6:  MOVF   31,W
0BE7:  MOVWF  48
0BE8:  MOVLW  BD
0BE9:  MOVWF  4F
0BEA:  MOVLW  52
0BEB:  MOVWF  4E
0BEC:  MOVLW  36
0BED:  MOVWF  4D
0BEE:  MOVLW  7C
0BEF:  MOVWF  4C
0BF0:  MOVLP  00
0BF1:  CALL   1B7
0BF2:  MOVLP  08
0BF3:  MOVF   77,W
0BF4:  MOVWF  40
0BF5:  MOVF   78,W
0BF6:  MOVWF  41
0BF7:  MOVF   79,W
0BF8:  MOVWF  42
0BF9:  MOVF   7A,W
0BFA:  MOVWF  43
0BFB:  BCF    03.1
0BFC:  MOVF   43,W
0BFD:  MOVWF  4B
0BFE:  MOVF   42,W
0BFF:  MOVWF  4A
0C00:  MOVF   41,W
0C01:  MOVWF  49
0C02:  MOVF   40,W
0C03:  MOVWF  48
0C04:  MOVF   3B,W
0C05:  MOVWF  4F
0C06:  MOVF   3A,W
0C07:  MOVWF  4E
0C08:  MOVF   39,W
0C09:  MOVWF  4D
0C0A:  MOVF   38,W
0C0B:  MOVWF  4C
0C0C:  MOVLP  00
0C0D:  CALL   1B7
0C0E:  MOVLP  08
0C0F:  MOVF   7A,W
0C10:  MOVWF  3F
0C11:  MOVF   79,W
0C12:  MOVWF  3E
0C13:  MOVF   78,W
0C14:  MOVWF  3D
0C15:  MOVF   77,W
0C16:  MOVWF  3C
.................... 				//printf("2.92sec< <60sec\n"); ////debug 
.................... 			} 
.................... 		 
.................... 			if( Pulse_flow >= 0.3){ 
0C17:  MOVLW  9A
0C18:  MOVWF  43
0C19:  MOVLW  99
0C1A:  MOVWF  42
0C1B:  MOVLW  19
0C1C:  MOVWF  41
0C1D:  MOVLW  7D
0C1E:  MOVWF  40
0C1F:  MOVF   3F,W
0C20:  MOVWF  47
0C21:  MOVF   3E,W
0C22:  MOVWF  46
0C23:  MOVF   3D,W
0C24:  MOVWF  45
0C25:  MOVF   3C,W
0C26:  MOVWF  44
0C27:  MOVLP  00
0C28:  CALL   455
0C29:  MOVLP  08
0C2A:  BTFSC  03.0
0C2B:  GOTO   42E
0C2C:  BTFSS  03.2
0C2D:  GOTO   482
.................... 				output_bit(Pulse,0); 
0C2E:  MOVLB  02
0C2F:  BCF    0C.2
0C30:  MOVLB  01
0C31:  BCF    0C.2
.................... 				delay_ms(15); 
0C32:  MOVLW  0F
0C33:  MOVLB  00
0C34:  MOVWF  41
0C35:  MOVLP  00
0C36:  CALL   0A5
0C37:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0C38:  MOVLB  02
0C39:  BSF    0C.2
0C3A:  MOVLB  01
0C3B:  BCF    0C.2
.................... 				delay_ms(20); 
0C3C:  MOVLW  14
0C3D:  MOVLB  00
0C3E:  MOVWF  41
0C3F:  MOVLP  00
0C40:  CALL   0A5
0C41:  MOVLP  08
.................... 				output_bit(Pulse,0); 
0C42:  MOVLB  02
0C43:  BCF    0C.2
0C44:  MOVLB  01
0C45:  BCF    0C.2
.................... 				delay_ms(15); 
0C46:  MOVLW  0F
0C47:  MOVLB  00
0C48:  MOVWF  41
0C49:  MOVLP  00
0C4A:  CALL   0A5
0C4B:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0C4C:  MOVLB  02
0C4D:  BSF    0C.2
0C4E:  MOVLB  01
0C4F:  BCF    0C.2
.................... 				delay_ms(20); 
0C50:  MOVLW  14
0C51:  MOVLB  00
0C52:  MOVWF  41
0C53:  MOVLP  00
0C54:  CALL   0A5
0C55:  MOVLP  08
.................... 				output_bit(Pulse,0); 
0C56:  MOVLB  02
0C57:  BCF    0C.2
0C58:  MOVLB  01
0C59:  BCF    0C.2
.................... 				delay_ms(15); 
0C5A:  MOVLW  0F
0C5B:  MOVLB  00
0C5C:  MOVWF  41
0C5D:  MOVLP  00
0C5E:  CALL   0A5
0C5F:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0C60:  MOVLB  02
0C61:  BSF    0C.2
0C62:  MOVLB  01
0C63:  BCF    0C.2
.................... 				 
.................... 				g_before_offset= Pulse_flow - 0.3; 
0C64:  BSF    03.1
0C65:  MOVLB  00
0C66:  MOVF   3F,W
0C67:  MOVWF  4B
0C68:  MOVF   3E,W
0C69:  MOVWF  4A
0C6A:  MOVF   3D,W
0C6B:  MOVWF  49
0C6C:  MOVF   3C,W
0C6D:  MOVWF  48
0C6E:  MOVLW  9A
0C6F:  MOVWF  4F
0C70:  MOVLW  99
0C71:  MOVWF  4E
0C72:  MOVLW  19
0C73:  MOVWF  4D
0C74:  MOVLW  7D
0C75:  MOVWF  4C
0C76:  MOVLP  00
0C77:  CALL   1B7
0C78:  MOVLP  08
0C79:  MOVF   7A,W
0C7A:  MOVWF  34
0C7B:  MOVF   79,W
0C7C:  MOVWF  33
0C7D:  MOVF   78,W
0C7E:  MOVWF  32
0C7F:  MOVF   77,W
0C80:  MOVWF  31
.................... 			} 
.................... 			else if( Pulse_flow >= 0.2 && Pulse_flow < 0.3 ){ 
0C81:  GOTO   545
0C82:  MOVLW  CD
0C83:  MOVWF  43
0C84:  MOVLW  CC
0C85:  MOVWF  42
0C86:  MOVLW  4C
0C87:  MOVWF  41
0C88:  MOVLW  7C
0C89:  MOVWF  40
0C8A:  MOVF   3F,W
0C8B:  MOVWF  47
0C8C:  MOVF   3E,W
0C8D:  MOVWF  46
0C8E:  MOVF   3D,W
0C8F:  MOVWF  45
0C90:  MOVF   3C,W
0C91:  MOVWF  44
0C92:  MOVLP  00
0C93:  CALL   455
0C94:  MOVLP  08
0C95:  BTFSC  03.0
0C96:  GOTO   499
0C97:  BTFSS  03.2
0C98:  GOTO   4EE
0C99:  MOVF   3F,W
0C9A:  MOVWF  43
0C9B:  MOVF   3E,W
0C9C:  MOVWF  42
0C9D:  MOVF   3D,W
0C9E:  MOVWF  41
0C9F:  MOVF   3C,W
0CA0:  MOVWF  40
0CA1:  MOVLW  9A
0CA2:  MOVWF  47
0CA3:  MOVLW  99
0CA4:  MOVWF  46
0CA5:  MOVLW  19
0CA6:  MOVWF  45
0CA7:  MOVLW  7D
0CA8:  MOVWF  44
0CA9:  MOVLP  00
0CAA:  CALL   455
0CAB:  MOVLP  08
0CAC:  BTFSS  03.0
0CAD:  GOTO   4EE
.................... 				output_bit(Pulse,0); 
0CAE:  MOVLB  02
0CAF:  BCF    0C.2
0CB0:  MOVLB  01
0CB1:  BCF    0C.2
.................... 				delay_ms(15); 
0CB2:  MOVLW  0F
0CB3:  MOVLB  00
0CB4:  MOVWF  41
0CB5:  MOVLP  00
0CB6:  CALL   0A5
0CB7:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0CB8:  MOVLB  02
0CB9:  BSF    0C.2
0CBA:  MOVLB  01
0CBB:  BCF    0C.2
.................... 				delay_ms(20); 
0CBC:  MOVLW  14
0CBD:  MOVLB  00
0CBE:  MOVWF  41
0CBF:  MOVLP  00
0CC0:  CALL   0A5
0CC1:  MOVLP  08
.................... 				output_bit(Pulse,0); 
0CC2:  MOVLB  02
0CC3:  BCF    0C.2
0CC4:  MOVLB  01
0CC5:  BCF    0C.2
.................... 				delay_ms(15); 
0CC6:  MOVLW  0F
0CC7:  MOVLB  00
0CC8:  MOVWF  41
0CC9:  MOVLP  00
0CCA:  CALL   0A5
0CCB:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0CCC:  MOVLB  02
0CCD:  BSF    0C.2
0CCE:  MOVLB  01
0CCF:  BCF    0C.2
.................... 				 
.................... 				g_before_offset= Pulse_flow - 0.2; 
0CD0:  BSF    03.1
0CD1:  MOVLB  00
0CD2:  MOVF   3F,W
0CD3:  MOVWF  4B
0CD4:  MOVF   3E,W
0CD5:  MOVWF  4A
0CD6:  MOVF   3D,W
0CD7:  MOVWF  49
0CD8:  MOVF   3C,W
0CD9:  MOVWF  48
0CDA:  MOVLW  CD
0CDB:  MOVWF  4F
0CDC:  MOVLW  CC
0CDD:  MOVWF  4E
0CDE:  MOVLW  4C
0CDF:  MOVWF  4D
0CE0:  MOVLW  7C
0CE1:  MOVWF  4C
0CE2:  MOVLP  00
0CE3:  CALL   1B7
0CE4:  MOVLP  08
0CE5:  MOVF   7A,W
0CE6:  MOVWF  34
0CE7:  MOVF   79,W
0CE8:  MOVWF  33
0CE9:  MOVF   78,W
0CEA:  MOVWF  32
0CEB:  MOVF   77,W
0CEC:  MOVWF  31
.................... 			} 
.................... 			else if( Pulse_flow >= 0.1 && Pulse_flow < 0.2 ){ 
0CED:  GOTO   545
0CEE:  MOVLW  CD
0CEF:  MOVWF  43
0CF0:  MOVLW  CC
0CF1:  MOVWF  42
0CF2:  MOVLW  4C
0CF3:  MOVWF  41
0CF4:  MOVLW  7B
0CF5:  MOVWF  40
0CF6:  MOVF   3F,W
0CF7:  MOVWF  47
0CF8:  MOVF   3E,W
0CF9:  MOVWF  46
0CFA:  MOVF   3D,W
0CFB:  MOVWF  45
0CFC:  MOVF   3C,W
0CFD:  MOVWF  44
0CFE:  MOVLP  00
0CFF:  CALL   455
0D00:  MOVLP  08
0D01:  BTFSC  03.0
0D02:  GOTO   505
0D03:  BTFSS  03.2
0D04:  GOTO   545
0D05:  MOVF   3F,W
0D06:  MOVWF  43
0D07:  MOVF   3E,W
0D08:  MOVWF  42
0D09:  MOVF   3D,W
0D0A:  MOVWF  41
0D0B:  MOVF   3C,W
0D0C:  MOVWF  40
0D0D:  MOVLW  CD
0D0E:  MOVWF  47
0D0F:  MOVLW  CC
0D10:  MOVWF  46
0D11:  MOVLW  4C
0D12:  MOVWF  45
0D13:  MOVLW  7C
0D14:  MOVWF  44
0D15:  MOVLP  00
0D16:  CALL   455
0D17:  MOVLP  08
0D18:  BTFSS  03.0
0D19:  GOTO   545
.................... 				output_bit(Pulse,0); 
0D1A:  MOVLB  02
0D1B:  BCF    0C.2
0D1C:  MOVLB  01
0D1D:  BCF    0C.2
.................... 				delay_ms(15); 
0D1E:  MOVLW  0F
0D1F:  MOVLB  00
0D20:  MOVWF  41
0D21:  MOVLP  00
0D22:  CALL   0A5
0D23:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0D24:  MOVLB  02
0D25:  BSF    0C.2
0D26:  MOVLB  01
0D27:  BCF    0C.2
.................... 				 
.................... 				g_before_offset= Pulse_flow - 0.1; 
0D28:  BSF    03.1
0D29:  MOVLB  00
0D2A:  MOVF   3F,W
0D2B:  MOVWF  4B
0D2C:  MOVF   3E,W
0D2D:  MOVWF  4A
0D2E:  MOVF   3D,W
0D2F:  MOVWF  49
0D30:  MOVF   3C,W
0D31:  MOVWF  48
0D32:  MOVLW  CD
0D33:  MOVWF  4F
0D34:  MOVLW  CC
0D35:  MOVWF  4E
0D36:  MOVLW  4C
0D37:  MOVWF  4D
0D38:  MOVLW  7B
0D39:  MOVWF  4C
0D3A:  MOVLP  00
0D3B:  CALL   1B7
0D3C:  MOVLP  08
0D3D:  MOVF   7A,W
0D3E:  MOVWF  34
0D3F:  MOVF   79,W
0D40:  MOVWF  33
0D41:  MOVF   78,W
0D42:  MOVWF  32
0D43:  MOVF   77,W
0D44:  MOVWF  31
.................... 			} 
.................... 			 
.................... 			else{} 
.................... 		 
.................... 		g_cal_flag = 0;	 
0D45:  CLRF   35
.................... 		//printf("Pulse cycle= %Ldms\n", g_tcnt_result); ////debug 
.................... 		 
.................... 		} 
.................... 		else{} 
.................... 	 
.................... 	 
.................... 		if(g_tx_flag ==1){ 
0D46:  DECFSZ 26,W
0D47:  GOTO   55E
.................... 			printf("%5.1f\n",g_drainage_flow); 
0D48:  MOVLW  04
0D49:  MOVWF  04
0D4A:  MOVF   30,W
0D4B:  MOVWF  43
0D4C:  MOVF   2F,W
0D4D:  MOVWF  42
0D4E:  MOVF   2E,W
0D4F:  MOVWF  41
0D50:  MOVF   2D,W
0D51:  MOVWF  40
0D52:  MOVLW  01
0D53:  MOVWF  44
0D54:  MOVLP  00
0D55:  GOTO   4FF
0D56:  MOVLP  08
0D57:  MOVLW  0A
0D58:  BTFSS  11.4
0D59:  GOTO   558
0D5A:  MOVLB  03
0D5B:  MOVWF  1A
.................... 			g_tx_flag = 0; 
0D5C:  MOVLB  00
0D5D:  CLRF   26
.................... 		} 
.................... 		else{} 
.................... 		 
.................... 		if(g_drainage_flow >900){ 
0D5E:  CLRF   43
0D5F:  CLRF   42
0D60:  MOVLW  61
0D61:  MOVWF  41
0D62:  MOVLW  88
0D63:  MOVWF  40
0D64:  MOVF   30,W
0D65:  MOVWF  47
0D66:  MOVF   2F,W
0D67:  MOVWF  46
0D68:  MOVF   2E,W
0D69:  MOVWF  45
0D6A:  MOVF   2D,W
0D6B:  MOVWF  44
0D6C:  MOVLP  00
0D6D:  CALL   455
0D6E:  MOVLP  08
0D6F:  BTFSS  03.0
0D70:  GOTO   578
.................... 			g_tcnt = 0; 
0D71:  CLRF   25
0D72:  CLRF   24
.................... 			set_timer0(0); 
0D73:  CLRF   15
.................... 			g_drainage_flow=0.0; 
0D74:  CLRF   30
0D75:  CLRF   2F
0D76:  CLRF   2E
0D77:  CLRF   2D
.................... 		} 
.................... 		else{} 
.................... 		 
.................... 		if(g_before_offset >= 0.1){ 
0D78:  MOVLW  CD
0D79:  MOVWF  43
0D7A:  MOVLW  CC
0D7B:  MOVWF  42
0D7C:  MOVLW  4C
0D7D:  MOVWF  41
0D7E:  MOVLW  7B
0D7F:  MOVWF  40
0D80:  MOVF   34,W
0D81:  MOVWF  47
0D82:  MOVF   33,W
0D83:  MOVWF  46
0D84:  MOVF   32,W
0D85:  MOVWF  45
0D86:  MOVF   31,W
0D87:  MOVWF  44
0D88:  MOVLP  00
0D89:  CALL   455
0D8A:  MOVLP  08
0D8B:  BTFSC  03.0
0D8C:  GOTO   58F
0D8D:  BTFSS  03.2
0D8E:  GOTO   5C4
.................... 				delay_ms(20); 
0D8F:  MOVLW  14
0D90:  MOVWF  41
0D91:  MOVLP  00
0D92:  CALL   0A5
0D93:  MOVLP  08
.................... 				output_bit(Pulse,0); 
0D94:  MOVLB  02
0D95:  BCF    0C.2
0D96:  MOVLB  01
0D97:  BCF    0C.2
.................... 				delay_ms(15); 
0D98:  MOVLW  0F
0D99:  MOVLB  00
0D9A:  MOVWF  41
0D9B:  MOVLP  00
0D9C:  CALL   0A5
0D9D:  MOVLP  08
.................... 				output_bit(Pulse,1); 
0D9E:  MOVLB  02
0D9F:  BSF    0C.2
0DA0:  MOVLB  01
0DA1:  BCF    0C.2
.................... 				delay_ms(20); 
0DA2:  MOVLW  14
0DA3:  MOVLB  00
0DA4:  MOVWF  41
0DA5:  MOVLP  00
0DA6:  CALL   0A5
0DA7:  MOVLP  08
.................... 				 
.................... 				g_before_offset= g_before_offset - 0.1; 
0DA8:  BSF    03.1
0DA9:  MOVF   34,W
0DAA:  MOVWF  4B
0DAB:  MOVF   33,W
0DAC:  MOVWF  4A
0DAD:  MOVF   32,W
0DAE:  MOVWF  49
0DAF:  MOVF   31,W
0DB0:  MOVWF  48
0DB1:  MOVLW  CD
0DB2:  MOVWF  4F
0DB3:  MOVLW  CC
0DB4:  MOVWF  4E
0DB5:  MOVLW  4C
0DB6:  MOVWF  4D
0DB7:  MOVLW  7B
0DB8:  MOVWF  4C
0DB9:  MOVLP  00
0DBA:  CALL   1B7
0DBB:  MOVLP  08
0DBC:  MOVF   7A,W
0DBD:  MOVWF  34
0DBE:  MOVF   79,W
0DBF:  MOVWF  33
0DC0:  MOVF   78,W
0DC1:  MOVWF  32
0DC2:  MOVF   77,W
0DC3:  MOVWF  31
.................... 		} 
.................... 		else{} 
.................... 			 
.................... 		lcd_cmd(0x80);				//To the head of the 1st line 
0DC4:  MOVLW  80
0DC5:  MOVWF  40
0DC6:  MOVLP  00
0DC7:  CALL   110
0DC8:  MOVLP  08
.................... 		printf(lcd_data,"C= %5lu    %1umin",drainage_cnt,g_tcnt_result_min); 
0DC9:  MOVLW  43
0DCA:  MOVWF  4D
0DCB:  MOVLP  00
0DCC:  CALL   15F
0DCD:  MOVLP  08
0DCE:  MOVLW  3D
0DCF:  MOVWF  4D
0DD0:  MOVLP  00
0DD1:  CALL   15F
0DD2:  MOVLP  08
0DD3:  MOVLW  20
0DD4:  MOVWF  4D
0DD5:  MOVLP  00
0DD6:  CALL   15F
0DD7:  MOVLP  08
0DD8:  MOVLW  00
0DD9:  MOVWF  04
0DDA:  MOVF   37,W
0DDB:  MOVWF  41
0DDC:  MOVF   36,W
0DDD:  MOVWF  40
0DDE:  MOVLP  00
0DDF:  CALL   5CF
0DE0:  MOVLP  08
0DE1:  MOVLW  9F
0DE2:  MOVLB  03
0DE3:  MOVWF  11
0DE4:  MOVLW  00
0DE5:  MOVWF  12
0DE6:  BSF    03.0
0DE7:  MOVLW  04
0DE8:  MOVLB  00
0DE9:  MOVWF  40
0DEA:  MOVLP  00
0DEB:  GOTO   62D
0DEC:  MOVLP  08
0DED:  MOVF   2C,W
0DEE:  MOVWF  40
0DEF:  MOVLW  18
0DF0:  MOVWF  41
0DF1:  MOVLP  00
0DF2:  GOTO   690
0DF3:  MOVLP  08
0DF4:  MOVLW  6D
0DF5:  MOVWF  4D
0DF6:  MOVLP  00
0DF7:  CALL   15F
0DF8:  MOVLP  08
0DF9:  MOVLW  69
0DFA:  MOVWF  4D
0DFB:  MOVLP  00
0DFC:  CALL   15F
0DFD:  MOVLP  08
0DFE:  MOVLW  6E
0DFF:  MOVWF  4D
0E00:  MOVLP  00
0E01:  CALL   15F
0E02:  MOVLP  08
.................... 		lcd_cmd(0xC0);				//To the head of the 2nd line 
0E03:  MOVLW  C0
0E04:  MOVWF  40
0E05:  MOVLP  00
0E06:  CALL   110
0E07:  MOVLP  08
.................... 		//printf(lcd_data,"Flow= %6.1fL",g_drainage_flow); 
....................         printf(lcd_data,"%6lums %6.1fL",g_tcnt_result,g_drainage_flow); 
0E08:  MOVLW  01
0E09:  MOVWF  40
0E0A:  MOVLW  20
0E0B:  MOVWF  4D
0E0C:  MOVLP  00
0E0D:  CALL   15F
0E0E:  MOVLP  08
0E0F:  DECFSZ 40,F
0E10:  GOTO   60A
0E11:  MOVLW  00
0E12:  MOVWF  04
0E13:  MOVF   2B,W
0E14:  MOVWF  41
0E15:  MOVF   2A,W
0E16:  MOVWF  40
0E17:  MOVLP  00
0E18:  CALL   5CF
0E19:  MOVLP  08
0E1A:  MOVLW  6D
0E1B:  MOVWF  4D
0E1C:  MOVLP  00
0E1D:  CALL   15F
0E1E:  MOVLP  08
0E1F:  MOVLW  73
0E20:  MOVWF  4D
0E21:  MOVLP  00
0E22:  CALL   15F
0E23:  MOVLP  08
0E24:  MOVLW  20
0E25:  MOVWF  4D
0E26:  MOVLP  00
0E27:  CALL   15F
0E28:  MOVLP  08
0E29:  MOVLW  05
0E2A:  MOVWF  04
0E2B:  MOVF   30,W
0E2C:  MOVWF  43
0E2D:  MOVF   2F,W
0E2E:  MOVWF  42
0E2F:  MOVF   2E,W
0E30:  MOVWF  41
0E31:  MOVF   2D,W
0E32:  MOVWF  40
0E33:  MOVLW  01
0E34:  MOVWF  44
0E35:  MOVLP  00
0E36:  GOTO   6C6
0E37:  MOVLP  08
0E38:  MOVLW  4C
0E39:  MOVWF  4D
0E3A:  MOVLP  00
0E3B:  CALL   15F
0E3C:  MOVLP  08
.................... 		delay_ms(500);				//0.5sec間隔 
0E3D:  MOVLW  02
0E3E:  MOVWF  40
0E3F:  MOVLW  FA
0E40:  MOVWF  41
0E41:  MOVLP  00
0E42:  CALL   0A5
0E43:  MOVLP  08
0E44:  DECFSZ 40,F
0E45:  GOTO   63F
.................... 	} 
0E46:  GOTO   07F
.................... } 
....................  
0E47:  GOTO   647

Configuration Fuses:
   Word  1: 09E2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT NOCLKOUT NOIESO NOFCMEN
   Word  2: 0AFF   NOWRT PLL_SW STVREN BORV25 DEBUG NOLVP

   Some fuses have been forced to be compatible with the ICD debugger.
